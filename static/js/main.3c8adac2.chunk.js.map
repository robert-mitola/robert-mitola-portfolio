{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["PAGE","Object","freeze","home","paintings","prints","films","contact","App","state","selectedPage","this","setState","page","_this2","react_default","a","createElement","className","getClassNamesForNav","onClick","selectPage","role","href","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRAGMA,SAAOC,OAAOC,OAAO,CACzBC,KAAM,OACNC,UAAW,YACXC,OAAQ,SACRC,MAAO,QACPC,QAAS,aAGLC,6MACJC,MAAQ,CACNC,aAAcV,EAAKG,gFAGVO,GACTC,KAAKC,SAAS,CACZF,6DAIgBG,GAElB,OADyBF,KAAKF,MAAtBC,eACgBG,EACtB,kBACA,4CAGI,IAAAC,EAAAH,KACN,OACEI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8DACfH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,oBAClBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAd,UACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2CACfH,EAAAC,EAAAC,cAAA,QACEC,UAAWP,KAAKQ,oBAAoBnB,EAAKG,MACzCiB,QAAS,kBAAMN,EAAKO,WAAWrB,EAAKG,QAEnCH,EAAKG,MAERY,EAAAC,EAAAC,cAAA,QACEC,UAAWP,KAAKQ,oBAAoBnB,EAAKI,WACzCgB,QAAS,kBAAMN,EAAKO,WAAWrB,EAAKI,aAEnCJ,EAAKI,WAERW,EAAAC,EAAAC,cAAA,QACEC,UAAWP,KAAKQ,oBAAoBnB,EAAKK,QACzCe,QAAS,kBAAMN,EAAKO,WAAWrB,EAAKK,UAEnCL,EAAKK,QAERU,EAAAC,EAAAC,cAAA,QACEC,UAAWP,KAAKQ,oBAAoBnB,EAAKM,OACzCc,QAAS,kBAAMN,EAAKO,WAAWrB,EAAKM,SAEnCN,EAAKM,OAERS,EAAAC,EAAAC,cAAA,QACEC,UAAWP,KAAKQ,oBAAoBnB,EAAKO,SACzCa,QAAS,kBAAMN,EAAKO,WAAWrB,EAAKO,WAEnCP,EAAKO,YAMRQ,EAAAC,EAAAC,cAAA,QAAMK,KAAK,OAAOJ,UAAU,eAC5BH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBAAd,cACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QACbH,EAAAC,EAAAC,cAAA,4CAEAF,EAAAC,EAAAC,cAAA,KACEC,UAAU,QAEZH,EAAAC,EAAAC,cAAA,QACEM,KAAK,IACLL,UAAU,4BAFZ,cASAH,EAAAC,EAAAC,cAAA,UACEC,UAAU,oBACZH,EAAAC,EAAAC,cAAA,OACEC,UAAU,SAEZH,EAAAC,EAAAC,cAAA,+BACqBF,EAAAC,EAAAC,cAAA,KAAGM,KAAK,6BAAR,aADrB,sBACyFR,EAAAC,EAAAC,cAAA,KAAGM,KAAK,2BAAR,QADzF,gBAlFYC,IAAMC,WCCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3c8adac2.chunk.js","sourcesContent":["import React from 'react';\nimport './cover.css';\n\nconst PAGE = Object.freeze({\n  home: 'Home',\n  paintings: 'Paintings',\n  prints: 'Prints',\n  films: 'Films',\n  contact: 'Contact'\n});\n\nclass App extends React.Component {\n  state = {\n    selectedPage: PAGE.home\n  }\n\n  selectPage(selectedPage){\n    this.setState({\n      selectedPage\n    })\n  }\n\n  getClassNamesForNav(page){\n    const { selectedPage } = this.state;\n    return selectedPage === page ?\n      'nav-link active' :\n      'nav-link';\n  }\n\n  render(){\n    return(\n      <div className=\"text-center cover-body\">\n      <div className=\"cover-container d-flex w-100 h-100 p-3 mx-auto flex-column\">\n      <header className=\"masthead mb-auto\">\n      <div className=\"inner\">\n      <h3 className=\"masthead-brand\">R.A.M.</h3>\n      <nav className=\"nav nav-masthead justify-content-center\">\n      <span\n        className={this.getClassNamesForNav(PAGE.home)}\n        onClick={() => this.selectPage(PAGE.home)}\n      >\n        {PAGE.home}\n      </span>\n      <span\n        className={this.getClassNamesForNav(PAGE.paintings)}\n        onClick={() => this.selectPage(PAGE.paintings)}\n      >\n        {PAGE.paintings}\n      </span>\n      <span\n        className={this.getClassNamesForNav(PAGE.prints)}\n        onClick={() => this.selectPage(PAGE.prints)}\n      >\n        {PAGE.prints}\n      </span>\n      <span\n        className={this.getClassNamesForNav(PAGE.films)}\n        onClick={() => this.selectPage(PAGE.films)}\n      >\n        {PAGE.films}\n      </span>\n      <span\n        className={this.getClassNamesForNav(PAGE.contact)}\n        onClick={() => this.selectPage(PAGE.contact)}\n      >\n        {PAGE.contact}\n      </span>\n      </nav>\n      </div>\n      </header>\n\n      <main role=\"main\" className=\"inner cover\">\n      <h1 className=\"cover-heading\">Rob Mitola</h1>\n      <p className=\"lead\">\n      <i>Welcome to my portfolio space.</i>\n      </p>\n      <p\n        className=\"lead\"\n      >\n      <span\n        href=\"#\"\n        className=\"btn btn-lg btn-secondary\"\n      >\n      View Art\n      </span>\n      </p>\n      </main>\n\n      <footer\n        className=\"mastfoot mt-auto\">\n      <div\n        className=\"inner\"\n      >\n      <p>\n        Special thanks for <a href=\"https://getbootstrap.com/\">Bootstrap</a> cover template by <a href=\"https://twitter.com/mdo\">@mdo</a>.\n      </p>\n      </div>\n      </footer>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport {App};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}